plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.minmarket'
version = '0.0.1'
sourceCompatibility = '19'

ext {
	junitJupiterVersion = '5.9.2'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/release' }
	maven { url 'https://repo.spring.io/snapshot' }
}

ext['junit-jupiter.version'] = junitJupiterVersion

dependencies {
	//spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation group: 'org.springframework.ws', name: 'spring-ws-security', version: '3.1.4'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// lombok
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok'

	// db
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'

	// swagger
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	// --- Test Dependencies ---
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.1.1'
	testImplementation 'io.github.benas:random-beans:3.7.0'
	testImplementation 'org.assertj:assertj-core'
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}
apply plugin: 'java'

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // report is always generated after tests run
}

check {
	dependsOn jacocoTestCoverageVerification
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = false
		csv.required = false

	}
}

// TODO: add more exceptions during growth of the project
jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			excludes = [
					'org.*',
					'com.minimarket.template_java_api.config.*',
					'com.minimarket.template_java_api.constants.*',
					'com.minimarket.template_java_api.dtos.*',
					'com.minimarket.template_java_api.entities.*',

					'com.minimarket.template_java_api.controllers.*',
			]
			limit {
				counter = 'BRANCH'
				minimum = 0.85
			}
		}

	}
}

checkstyle {
	toolVersion '10.7.0'
	configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}